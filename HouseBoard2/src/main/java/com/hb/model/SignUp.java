package com.hb.model;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
// Generated Dec 5, 2017 9:22:12 AM by Hibernate Tools 5.2.5.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * SignUp generated by hbm2java
 */
@Entity
@Table(name = "sign_up", catalog = "houseboard")
public class SignUp implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -6717987045214540031L;
	private Integer id;
	private String name;
	private String email;
	private Long mobileNumber;
	private String password;
	private String deviceTocken;
	
	@Temporal(TemporalType.DATE)
	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd HH:mm",timezone="IST")
	private Date dateTime;
	private Set<InviteReqSentToFrom> inviteReqSentToFroms = new HashSet<InviteReqSentToFrom>(0);
	private Set<GroupDetails> groupDetailses = new HashSet<GroupDetails>(0);
	private Set<AssignedGroupToUsers> assignedGroupToUserses = new HashSet<AssignedGroupToUsers>(0);
	private Set<HouseBoardTask> houseBoardTasks = new HashSet<HouseBoardTask>(0);
	
	private static final SimpleDateFormat FORMATER = new SimpleDateFormat("MMM dd, yyyy hh:mm a z");

	public SignUp() {
	}

	public SignUp(String name, String email, Long mobileNumber,Date dateTime, String password, String deviceTocken,
			Set<InviteReqSentToFrom> inviteReqSentToFroms, Set<GroupDetails> groupDetailses,
			Set<AssignedGroupToUsers> assignedGroupToUserses, Set<HouseBoardTask> houseBoardTasks) {
		this.name = name;
		this.email = email;
		this.mobileNumber = mobileNumber;
		this.password = password;
		this.dateTime = dateTime;
		this.deviceTocken = deviceTocken;
		this.inviteReqSentToFroms = inviteReqSentToFroms;
		this.groupDetailses = groupDetailses;
		this.assignedGroupToUserses = assignedGroupToUserses;
		this.houseBoardTasks = houseBoardTasks;
	}

	@Id
	@GenericGenerator(name="increment",strategy="increment")
	@GeneratedValue(generator="increment")
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "NAME", length = 100)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "EMAIL", length = 100)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "MOBILE_NUMBER")
	public Long getMobileNumber() {
		return this.mobileNumber;
	}

	public void setMobileNumber(Long mobileNumber) {
		this.mobileNumber = mobileNumber;
	}

	@Column(name = "PASSWORD", length = 100)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "DEVICE_TOCKEN", length = 100)
	public String getDeviceTocken() {
		return this.deviceTocken;
	}

	public void setDeviceTocken(String deviceTocken) {
		this.deviceTocken = deviceTocken;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "DATE_TIME", nullable = false, length = 19)
	public Date getDateTime() {
		if(dateTime == null) {
			try {
				dateTime = FORMATER.parse(FORMATER.format(new Date()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		//System.out.println("get method dateTime is "+this.dateTime);
		return this.dateTime;
	}

	public void setDateTime(Date dateTime) {
		System.out.println("set method dateTime is "+dateTime);
		this.dateTime = dateTime;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "signUp")
	public Set<InviteReqSentToFrom> getInviteReqSentToFroms() {
		return this.inviteReqSentToFroms;
	}

	public void setInviteReqSentToFroms(Set<InviteReqSentToFrom> inviteReqSentToFroms) {
		this.inviteReqSentToFroms = inviteReqSentToFroms;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "signUp")
	public Set<GroupDetails> getGroupDetailses() {
		return this.groupDetailses;
	}

	public void setGroupDetailses(Set<GroupDetails> groupDetailses) {
		this.groupDetailses = groupDetailses;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "signUp")
	public Set<AssignedGroupToUsers> getAssignedGroupToUserses() {
		return this.assignedGroupToUserses;
	}

	public void setAssignedGroupToUserses(Set<AssignedGroupToUsers> assignedGroupToUserses) {
		this.assignedGroupToUserses = assignedGroupToUserses;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "signUp")
	public Set<HouseBoardTask> getHouseBoardTasks() {
		return this.houseBoardTasks;
	}

	public void setHouseBoardTasks(Set<HouseBoardTask> houseBoardTasks) {
		this.houseBoardTasks = houseBoardTasks;
	}

}
